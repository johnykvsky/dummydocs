{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DummyGenerator","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>composer require johnykvsky/dummygenerator --dev</code></pre>"},{"location":"#about","title":"About","text":"<p>DummyGenerator is dummy/fake data generator for PHP. It's a fork of Faker, heavily rewritten at core, but overall is same easy to use. In example:</p> <pre><code>$generator = DummyGeneratorFactory::create(); // all extensions are loaded\necho $generator-&gt;firstName();</code></pre>"},{"location":"#but-why","title":"But why...?","text":"<p>Faker died because of being hard to maintain as mentioned in sunsetting-faker. Faker 2.0 seems to be dead because of \"death by committee\" kind of stuff.</p> <p>I needed simple dummy data generator for PHP 8.3, with modern architecture in mind. This is how DummyGenerator came to life.</p>"},{"location":"#changes-vs-faker","title":"Changes (vs Faker)","text":"<ul> <li>required PHP &gt;= 8.3</li> <li>PHPStan level 8 friendly</li> <li>PHPUnit tests for core and extensions (yep, some just check for not empty, but hey, it's random data)</li> <li>all <code>mt_rand</code> / <code>array_rand</code> replaced with <code>\\Random\\Randomizer</code></li> <li>no static methods, only one magic method (<code>__call()</code> in generator)</li> <li>interfaces and dependency injection for everything (all core implementations can be replaced with different ones)</li> <li>implementations can be changed on the fly with <code>addDefinition()</code></li> <li>language providers removed from core, that makes generator ~9.5Mb smaller</li> <li>changed <code>DateTime</code> extension, it supports <code>DateTimeInterface</code> for methods params (not only strings)</li> <li>changed <code>Uuid</code>, it supports <code>v4</code> only, use <code>uuid4()</code></li> <li>removed database providers (core is only for dummy data generation)</li> <li>removed <code>HmlLorem</code></li> <li>removed <code>File::filePath()</code> since it was interacting with system, not only generating dummy data</li> <li>added <code>Enum</code>, to get random values from PHP enums</li> <li>added <code>String</code>, to generate random string from given pool</li> <li>added support for <code>SystemClock</code>, PSR-20 implementation of Clock</li> </ul> <p>This package also fixes problem with FakerPHP <code>__destruct()</code> messing up with <code>seed()</code>, plus various other issues.</p> <p>There are two Randomizer implementations available:  * default <code>Randomizer</code>  * additional <code>XoshiroRandomizer</code>, which supports <code>seed()</code> - to be used in tests</p>"},{"location":"#why-php-83","title":"Why PHP &gt;= 8.3","text":"<p>Because of introduced in PHP 8.3:</p> <ul> <li><code>Randomizer::getFloat()</code></li> <li><code>Randomizer::getBytesFromString()</code></li> <li>and not so important but nice: typed class constants</li> </ul>"},{"location":"#other-stuff","title":"Other stuff","text":"<p>There is <code>script\\ExtensionsDocs.php</code> that can be used to generate list of available extensions and their methods (look at <code>generate-spec.php</code>)</p> <p>Since PHPUnit is still missing <code>--repeat</code>, in repository phpunit-repeat you can find Linux shell script for running tests multiple times.</p>"},{"location":"architecture/architecture/","title":"Overview","text":""},{"location":"architecture/architecture/#general-architecture","title":"General architecture","text":"<p>DummyGenerator architecture was build on top of one thing: to be able to replace all internals.</p> <p>To achieve that all internal classes are loaded into container and their implementation can be replaced anytime.</p> <p>It's worth remembering:  * there is a container holding extensions used by DummyGenerator * there are ways to replace items in the container.</p> <p>Simple example to start <code>DummyGenerator</code> is <pre><code>$generator = DummyGeneratorFactory::create();\necho $generator-&gt;firstName();</code></pre></p> <p>But this is a \"shortcut\", a factory that hides internals. Actually <code>DummyGenerator</code> accepts 3 parameters:</p> <ul> <li>Container</li> <li>Strategy</li> <li>Clock</li> </ul>"},{"location":"architecture/architecture/#the-flow","title":"The flow","text":"<p>When you generate a name with <code>-&gt;firstName()</code> actual flow looks like this:</p> <ul> <li><code>DummyGenerator</code> method <code>__call()</code> is launched</li> <li>generator is trying to find extension containing passed method name by reaching out to container <code>findProcessor()</code></li> <li>container is looping through all loaded definitions, checking if any of them has given method</li> <li>if it's found, then definition instance is returned to generator</li> <li>generator (with used strategy) is trying to get data from extension by running given method (in our example: <code>firstName()</code>)</li> </ul> <p>This has one thing worth notyfying: you should not have multiple extensions with same method names. <code>__call()</code> checks them one by one, in order of adding. So if you have by some reason 2 extensions that has same method (like <code>getName()</code> in both of them) and you run <code>$generator-&gt;getName()</code> it will execute <code>getName()</code> in extension that was added earlier to container.</p> <p>There is a walkaround for that - instead of doing <code>$generator-&gt;firstName()</code> and using internally magic method <code>__call()</code> you can hand-pick the extension with <code>-&gt;ext()</code>: <pre><code>echo $generator-&gt;firstName(); // default first name\necho $generator-&gt;ext(MyCustomNames::class)-&gt;firstName(); // will get custom name\necho $generator-&gt;ext(MySpecialNames::class)-&gt;firstName(); // will get special name</code></pre></p> <p>In above example <code>MyCustomNames</code> and <code>MySpecialNames</code> has to be added to container after build in <code>Person</code> extension (as it will be resolved first when looking for <code>firstName()</code>).</p>"},{"location":"architecture/clock/","title":"The Clock","text":"<p>Clock is simple implementation of PSR-20 Clock. It allows to set a clock with a timezone for generated dates.</p> <p>Clock has a param to set timezone: <pre><code>$clock = new SystemClock('Europe/London')</code></pre></p> <p>Thanks to Clock in your extension (look at <code>DateTime</code> for example) you will have access to <code>$this-&gt;clock-&gt;now()</code> that will return <code>\\DateTimeImmutable</code> object with current date time.</p> <p>If no timezone param is passed it checks for <code>date_default_timezone_get()</code> and if it's missing then <code>UTC</code> timezone is used. But <code>date_default_timezone_get()</code> is returning <code>UTC</code> as default anyway.</p> <p>Generator itself can return clock so you can do this to get current time: <pre><code>$generator-&gt;clock-&gt;now();</code></pre></p> <p>There is also <code>FrozenClock</code> ready to be used in tests - you can set it with fixed date:</p> <pre><code>$clock = new FrozenClock(new \\DateTimeImmutable('2025-08-11'), new \\DateTimeZone('UTC'));\n$generator = new DummyGenerator(DefinitionContainerBuilder::all(), new SimpleStragegy(), $clock)\n// or\n$generator = DummyGeneratorFactory::create();\n$generator = $generator-&gt;withClock($clock);\n</code></pre>"},{"location":"architecture/container/","title":"The Container","text":"<p>Container holds definitions - definitions are classes that can be used for generation stuff you need. Each item you can generate has own interface and implementation and you can change if needed.</p> <p>Available definitions interfaces are in <code>src/Definitions</code> directory and their implementation is in <code>src/Extensions</code>.</p> <p>Each of them can be added to container and passed to <code>DummyGenerator</code>.</p> <p>To make it easier there is <code>DefinitionContainerBuilder</code> that uses <code>DefinitionPack</code> with 3 predefined definitions packages:</p> <ul> <li>Base: DateTime, Enum, Lorem, Number, Strings, Uuid </li> <li>Default, all from Base plus: Coordinates, Country, Hash, Internet, Language, Person</li> <li>All, all from Default plus: Address, Barcode, Biased, Blood, Color, Company, File, Payment, PhoneNumber, UserAgent, Version</li> </ul> <p>Sample usage of <code>DefinitionContainerBuilder</code> looks like this: <pre><code>$container = DefinitionContainerBuilder::all(); // to get all extensions</code></pre></p>"},{"location":"architecture/container/#replacing-strategy-or-clock","title":"Replacing Strategy or Clock","text":"<p>You can create <code>DummyGenerator</code> with given strategy or clock, but you can also change strategy or clock in currently used generator: <pre><code>$generator = new DummyGenerator(DefinitionContainerBuilder::all(), new SimpleStrategy(), new SystemClock());\n$clock = new SystemClock(new \\DateTimeZone('UTC'));\n$strategy = new UniqueStrategy(retries: 500);\n$generator = $generator-&gt;withClock($clock)-&gt;withStrategy($strategy);\n</code></pre></p>"},{"location":"architecture/strategy/","title":"The Strategy","text":"<p>Strategy tells DummyGenerator how to generate things. You have 4 predefined strategies ready to be used: </p> <ul> <li><code>SimpleStrategy</code> default one, just generates data, no validation/checks are applied</li> <li><code>UniqueStrategy</code> makes sure generated data is unique</li> <li><code>ValidStrategy</code> allow to pass a callback validator that will check generated data</li> <li><code>ChanceStrategy</code> let you get data with given percentage chance</li> </ul> <p>For <code>Unique</code> and <code>Valid</code> strategy there is fixed amount of retries after which exception will be throws - to make sure it will not try to generate unique value forever.</p> <p>Sample strategies looks like: <pre><code>$simple = new SimpleStrategy();\n$unique = new UniqueStrategy(retries: 500); // we have 500 retries to get unique value\n$chance = new ChanceStrategy(weight: 50); // 50% chance to get value\n$valid = new ValidStrategy(fn($x) =&gt; $x &lt;= 50); // generated value has to be lower or equal than 50 </code></pre></p>"},{"location":"examples/definitions/","title":"Working with Definitions","text":""},{"location":"examples/definitions/#what-are-definitions","title":"What are definitions","text":"<p><code>DummyGenerator</code> was build with one idea - allow anyone to eaisly replace any extension. This is why all internals are kept in container.</p> <p>Container is a storage for definitions, with it's name as a key and value can be class name or object. So you can do this:</p> <pre><code>$container-&gt;add(CompanyExtensionInterface::class, MyCustomCompany::class);\n$luhhCalculator = new LuhnCalculator();\n$container-&gt;add(LuhnCalculatorInterface::class, $luhhCalculator);\n$container-&gt;add(AddressExtensionInterface::class, MyAddressExtension::create());</code></pre> <p>Definitions is an information about name and implementation. It can be extension (like <code>Adddress</code>) but also <code>Randomizer</code> (used internally for randomness), or calculator (like for Luhn).</p> <p>Apart from extensions those are definitions stored in container, that an be replaced:</p> <ul> <li>RandomizerInterface</li> <li>ReplacerInterface</li> <li>TransliteratorInterface</li> </ul> <p>And as a support for extensions:</p> <ul> <li>EanCalculatorInterface</li> <li>IbanCalculatorInterface</li> <li>IsbnCalculatorInterface</li> <li>LuhnCalculatorInterface</li> </ul>"},{"location":"examples/definitions/#how-can-i-change-definition-on-the-fly","title":"How can I change definition on the fly","text":"<p>To change definition to your own implementations you have use <code>addDefinition()</code> passing original definition identifier and your custom class name:</p> <pre><code>$generator-&gt;firstName(); // will generate i.e. \"Harry\"\n$generator-&gt;addDefinition(PersonExtensionInterface::class, ElvesPerson::class);\n$generator-&gt;firstName(); // will generate i.e. \"Fingolfin\"</code></pre> <p>Beware, this will clear internal cache for all extensions, so they will be resolved again. Not a big deal, but worth keeping in mind.</p> <p>If you want you can do that at container initialization via <code>add()</code> method:</p> <pre><code>$container = DefinitionContainerBuilder::all(); // all extensions\n$container-&gt;add(CompanyExtensionInterface::class, MyCustomCompany::class); // now MyCustomerCountry will be used ie. for $generator-&gt;company()\n$container-&gt;add(RandomizerInterface::class, MyRandomizer::class); // now MyRandomizer will be used for every internal call ie. to randomElement()\n$container-&gt;add(TransliteratorInterface::class, TransliteratorOnSteroids::class); // now TransliteratorOnSteroids will be used for transliterate()  \n$container-&gt;add(LuhnCalculatorInterface::class, ProperLuhnCalculator::class); // now ProperLuhnCalculator will be used Luhn operations \n$generator = new DummyGenerator($container);</code></pre>"},{"location":"examples/definitions/#how-can-i-use-generator-or-randomizer-in-my-custom-extension","title":"How can I use generator or randomizer in my custom extension","text":"<p>There are just 2 things to remember:</p> <ul> <li>your extension need to implement proper extension interface</li> <li>you need to use proper trait matched with interface</li> </ul> <p>And those pairs look like this:</p> <ul> <li><code>RandomizerAwareExtensionInterface</code> matched with <code>RandomizerAwareExtensionTrait</code></li> <li><code>ReplacerAwareExtensionInterface</code> matched with <code>ReplacerAwareExtensionTrait</code></li> <li><code>EanCalculatorExtensionInterface</code> matched with <code>EanCalculatorAwareExtensionTrait</code></li> <li><code>IbanCalculatorExtensionInterface</code> matched with <code>IbanCalculatorAwareExtensionTrait</code></li> <li><code>IsbnCalculatorExtensionInterface</code> matched with <code>IsbnCalculatorAwareExtensionTrait</code></li> <li><code>LuhnCalculatorExtensionInterface</code> matched with <code>LuhnCalculatorAwareExtensionTrait</code></li> </ul> <p>And that's all. Behind the scenes when fetching definition, container check if it implements one of those interfaces and add proper dependency. </p> <p>If in your extension you implement <code>RandomizerAwareExtensionInterface</code>, add trait <code>RandomizerAwareExtensionTrait</code> - you can use <code>$this-&gt;randomizer</code> as implementation of either default <code>Randomizer</code> or any other service you have put in <code>DefinitionContainer</code> under the name <code>RandomizerInterface::class</code></p> <p>One notice - there is also <code>TransliteratorAwareReplacerInterface</code> and <code>TransliteratorAwareReplacerTrait</code> since <code>Replacer</code> itself does <code>transliterate()</code> and needs this dependency.</p>"},{"location":"examples/extensions/","title":"Extensions How-To","text":""},{"location":"examples/extensions/#using-enumextension","title":"Using EnumExtension","text":"<p>Enum extension allows you to get random element or value from selected Enum object. It has two methods:</p> <ul> <li>enumValue(), that will get value from backed enums (which has to be string or int)</li> <li>enumCase(), that will get one of <code>cases()</code> element from enum (it will be <code>UnitEnum</code> object) </li> </ul> <p><code>enumValue()</code> has to be used on backed enums, but <code>enumCase()</code> works for backed and non-backed enums.</p> <p>For following enum:</p> <pre><code>enum SuitBackedIntEnum: string\n{\n    case Hearts = 'Hearts';\n    case Diamonds = 'Diamonds';\n    case Clubs = 'Clubs';\n    case Spades = 'Spades';\n}</code></pre> <p>You can do following:</p> <pre><code>$container = DefinitionContainerBuilder::base(); // base extensions \n$generator = new DummyGenerator($container);\n$generator-&gt;enumCase(SuitBackedIntEnum::class); // it will get random element, i.e. SuitBackedIntEnum::Diamonds\n// or\n$generator-&gt;enumValue(SuitBackedIntEnum::class); // it will get random value, i.e. \"Spades\"</code></pre>"},{"location":"examples/extensions/#using-stringsextension","title":"Using StringsExtension","text":"<p>With <code>LoremExtension</code> you can generate <code>words()</code> or <code>text()</code>. You can generate single word too - with <code>word()</code>, it will give you random words from Lorem Ipsum sample.</p> <p>In dummyproviders there is also <code>TextExtension</code> that allows you to generate random text with given length with <code>realText()</code>.</p> <p>But sometimes you want just a simple random string, with given length or given structure: only letters, with some numbers, with capital letters. This is where <code>StringsExtension</code> can help you:</p> <pre><code>$container = DefinitionContainerBuilder::base(); // base extensions \n$generator = new DummyGenerator($container);\n$string1 = $generator-&gt;string(); // it will give you random string, lowercase, with length between 3 and 8\n$string2 = $generator-&gt;string(3, 3); // it will give you random string, lowercase, with length equal to 3\n$string4 = $generator-&gt;string(3, 10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'); // it will give you random string, mixed case, with length from 3 to 10</code></pre> <p>As you can see you can pass any chars pool for generation. <code>StringsExtension</code> comes with 3 predefined pools:</p> <ul> <li><code>Strings::ALPHA_POOL</code> equals to <code>abcdefghijklmnopqrstuvwxyz</code>;</li> <li><code>Strings::ALPHA_CASE_POOL</code> equals to <code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code>;</li> <li><code>Strings::ALPHA_NUM_POOL</code> equals to <code>0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code>;</li> </ul> <p>If you want to have string with possible spaces - just create your own pool, i.e. <code>abcdefghijkl mnopqrstuvwxyz</code></p> <p>At core, it uses <code>\\Random\\Randomizer::getBytesFromString()</code> to generate random string.</p>"},{"location":"examples/language_providers/","title":"Language providers","text":"<p>One of main points of DummyGenerator is to keep core language agnostic. This is why all languages has been removed from core.</p> <p><code>Person</code> extension provides only ~15 names, 15 last names and so on than can be used as first name, last name, part of email etc. If you want more, check dummyproviders to get full providers for <code>en_US</code>, <code>en_GB</code> and <code>pl_PL</code>. I have created them to show how to make them / convert from old Faker, to allow anyone to work on other languages.</p> <p>Keep in mind:</p> <ul> <li>core will stay language agnostic</li> <li>I have no current plans to support any language</li> <li>I have no current plans to work on extending/improving existing language providers.</li> <li>if someone like to make a PR to improve/extend one of mentioned languages - I will gladly look at it.</li> <li>I will not accept PRs with other languages - but I will gladly link in this readme to repositories with them.</li> </ul> <p>Mentioned providers for <code>en_US</code>, <code>en_GB</code> and <code>pl_PL</code> can be found in dummyproviders repository.</p>"},{"location":"examples/localization/","title":"Localization","text":""},{"location":"examples/localization/#how-can-i-add-my-own-localised-definitions-languages","title":"How can I add my own localised definitions (languages)","text":"<pre><code>$container = DefinitionContainerBuilder::default();\n$container-&gt;add(AddressExtensionInterface::class, \\My\\Custom\\Provider\\pl_PL\\Address::class, ;\n$container-&gt;add(LicensePlate::class, \\My\\Custom\\Provider\\pl_PL\\LicensePlate::class);\n$generator = new DummyGenerator($container);</code></pre> <p>In this example two things happened: * <code>Address</code> extension will be overwritten with our custom <code>Address</code> made for <code>pl_PL</code> language * new extensions <code>LicensePlate</code> is added, so we can now use <code>$generator-&gt;licensePlate()</code> as it is defined in given class</p>"},{"location":"examples/localization/#how-can-i-use-localised-definitions","title":"How can I use localised definitions","text":"<p>Other way to work with localised extensions is to load them all and use by hand-picking:</p> <pre><code>$container = DefinitionContainerBuilder::default();\n$container-&gt;add(AddressPL::class, \\My\\Custom\\Provider\\AddressPL::class);\n$container-&gt;add(AddressDE::class, \\My\\Custom\\Provider\\AddressDE::class);\n$generator = new DummyGenerator($container);\necho $generator-&gt;firstName(); // default (English) first name\necho $generator-&gt;ext(AddressPL::class)-&gt;firstName(); // Polish first name\necho $generator-&gt;ext(AddressDE::class)-&gt;firstName(); // German first name</code></pre> <p>but this way we skip <code>__call</code> in <code>DummyGenerator</code> so it won't work with any other strategy than <code>Simple</code>. It's not bad, just keep that in mind.</p>"},{"location":"examples/localization/#how-can-i-use-providers-with-language-pack","title":"How can I use providers with language pack","text":"<p>Please look at readme in providers repository. In same way you can create and use your own language providers.</p>"},{"location":"examples/seed/","title":"Seed","text":"<p>DummyGenerator generate random data. Which is fine, but sometimes (i.e.: in tests) you want it to generate same data each time. This is where <code>seed()</code> comes to the rescue.</p> <p>Method <code>seed()</code> accepts param with a seed number. If you initialize generator with <code>seed(1434)</code>  it will always return same name for <code>-&gt;firstName()</code>, same address for <code>-&gt;buildingNumber()</code>, same color for <code>-&gt;hexColor()</code> and so on.</p>"},{"location":"examples/seed/#how-can-i-use-seed","title":"How can I use seed()","text":"<p>You have to change default randomizer to <code>XoshiroRandomizer</code> with desired seed number, i.e. for <code>seed=123</code> it would be:</p> <pre><code>    // standard initialization, adapt this to your needs\n    $container = \\DummyGenerator\\Container\\DefinitionContainerBuilder::base();\n    $generator = new \\DummyGenerator\\DummyGenerator($container);  \n    // replace randomizer with XoshiroRandomizer, which supports seed\n    $generator-&gt;addDefinition(\n        \\DummyGenerator\\Definitions\\Randomizer\\RandomizerInterface::class,\n        new \\DummyGenerator\\Core\\Randomizer\\XoshiroRandomizer(seed: 123)\n    );\n    // and from now on generator will use fixed seed to get data</code></pre>"},{"location":"extensions/address/","title":"Address","text":""},{"location":"extensions/address/#address","title":"Address","text":"<ul> <li><code>address()</code>: (string) '2971 Fisher Lane 20169 Adamsshire'</li> <li><code>buildingNumber()</code>: (string) '57230'</li> <li><code>city()</code>: (string) 'North Jackie'</li> <li><code>cityPrefix()</code>: (string) 'South'</li> <li><code>citySuffix()</code>: (string) 'berg'</li> <li><code>country()</code>: (string) 'France'</li> <li><code>postcode()</code>: (string) '23-092'</li> <li><code>streetAddress()</code>: (string) '8964 Murphy Alley'</li> <li><code>streetName()</code>: (string) 'Daisy Hill'</li> <li><code>streetSuffix()</code>: (string) 'Square'</li> </ul>"},{"location":"extensions/barcode/","title":"Barcode","text":""},{"location":"extensions/barcode/#barcode","title":"Barcode","text":"<ul> <li><code>ean8()</code>: (string) '08982148'</li> <li><code>ean13()</code>: (string) '7294945899994'</li> <li><code>isbn10()</code>: (string) '4734846154'</li> <li><code>isbn13()</code>: (string) '9794760132552'</li> </ul>"},{"location":"extensions/biased/","title":"Biased","text":""},{"location":"extensions/biased/#biased","title":"Biased","text":"<ul> <li><code>biasedNumberBetween($min = 0, $max = 100, $function = \"sqrt\")</code>: (int) 57</li> <li><code>linearHigh($number)</code>: (float) ''</li> <li><code>linearLow($number)</code>: (float) ''</li> <li><code>unbiased()</code>: (int) 1</li> </ul>"},{"location":"extensions/blood/","title":"Blood","text":""},{"location":"extensions/blood/#blood","title":"Blood","text":"<ul> <li><code>bloodGroup()</code>: (string) 'O-'</li> <li><code>bloodRh()</code>: (string) '-'</li> <li><code>bloodType()</code>: (string) 'B'</li> </ul>"},{"location":"extensions/color/","title":"Color","text":""},{"location":"extensions/color/#color","title":"Color","text":"<ul> <li><code>colorName()</code>: (string) 'Silver'</li> <li><code>hexColor()</code>: (string) '#6ce0b8'</li> <li><code>hslColor()</code>: (string) '275,20,44'</li> <li><code>hslColorAsArray()</code>: (array) ['254', '72', '75']</li> <li><code>rgbaCssColor()</code>: (string) 'rgba(162,198,165,0.4)'</li> <li><code>rgbColor()</code>: (string) '127,5,248'</li> <li><code>rgbColorAsArray()</code>: (array) ['5', '221', '129']</li> <li><code>rgbCssColor()</code>: (string) 'rgb(168,70,220)'</li> <li><code>safeColorName()</code>: (string) 'lime'</li> <li><code>safeHexColor()</code>: (string) '#006644'</li> </ul>"},{"location":"extensions/company/","title":"Company","text":""},{"location":"extensions/company/#company","title":"Company","text":"<ul> <li><code>company()</code>: (string) 'Green Ltd'</li> <li><code>companySuffix()</code>: (string) 'Ltd'</li> <li><code>jobTitle()</code>: (string) 'eum'</li> </ul>"},{"location":"extensions/coordinates/","title":"Coordinates","text":""},{"location":"extensions/coordinates/#coordinates","title":"Coordinates","text":"<ul> <li><code>coordinates()</code>: (array) ['-25.686938', '3.844695']</li> <li><code>latitude($min = -90, $max = 90)</code>: (float) 1.573627</li> <li><code>longitude($min = -180, $max = 180)</code>: (float) -24.150298</li> </ul>"},{"location":"extensions/country/","title":"Country","text":""},{"location":"extensions/country/#country","title":"Country","text":"<ul> <li><code>countryISOAlpha2()</code>: (string) 'SD'</li> <li><code>countryISOAlpha3()</code>: (string) 'MLT'</li> </ul>"},{"location":"extensions/datetime/","title":"Datetime","text":""},{"location":"extensions/datetime/#datetime","title":"DateTime","text":"<ul> <li><code>amPm($until = \"now\")</code>: (string) 'pm'</li> <li><code>century()</code>: (string) 'XIII'</li> <li><code>date($format = \"Y-m-d\", $until = \"now\")</code>: (string) '2018-05-11'</li> <li><code>dateTime($until = \"now\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('2006-03-22 03:36:36')</li> <li><code>dateTimeAD($until = \"now\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('1491-10-31 14:51:33')</li> <li><code>dateTimeBetween($from = \"-30 years\", $until = \"now\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('2015-04-27 21:52:59')</li> <li><code>dateTimeInInterval($from = \"-30 years\", $interval = \"+5 days\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('1995-08-29 15:53:59')</li> <li><code>dateTimeThisCentury($until = \"now\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('2017-07-13 11:21:09')</li> <li><code>dateTimeThisDecade($until = \"now\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('2024-11-01 10:42:53')</li> <li><code>dateTimeThisMonth($until = \"last day of this month\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('2025-08-15 06:36:47')</li> <li><code>dateTimeThisWeek($until = \"sunday this week\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('2025-08-27 18:09:57')</li> <li><code>dateTimeThisYear($until = \"last day of december\", $timezone = null)</code>: (\\DateTimeInterface) DateTimeImmutable('2025-04-28 02:58:59')</li> <li><code>dayOfMonth($until = \"now\")</code>: (string) '08'</li> <li><code>dayOfWeek($until = \"now\")</code>: (string) 'Monday'</li> <li><code>iso8601($until = \"now\")</code>: (string) '2012-04-10T01:31:00+02:00'</li> <li><code>month($until = \"now\")</code>: (string) '08'</li> <li><code>monthName($until = \"now\")</code>: (string) 'June'</li> <li><code>time($format = \"H:i:s\", $until = \"now\")</code>: (string) '23:58:27'</li> <li><code>timezone()</code>: (string) 'America/Edmonton'</li> <li><code>unixTime($until = \"now\")</code>: (int) 505668439</li> <li><code>year($until = \"now\")</code>: (string) '2009'</li> </ul>"},{"location":"extensions/enum/","title":"Enum","text":""},{"location":"extensions/enum/#enum","title":"Enum","text":"<ul> <li><code>enumCase($enum)</code>: (\\UnitEnum) ''</li> <li><code>enumValue($enum)</code>: (string|int) ''</li> </ul>"},{"location":"extensions/file/","title":"File","text":""},{"location":"extensions/file/#file","title":"File","text":"<ul> <li><code>extension()</code>: (string) 'dtd'</li> <li><code>mimeType()</code>: (string) 'text/x-nfo'</li> </ul>"},{"location":"extensions/hash/","title":"Hash","text":""},{"location":"extensions/hash/#hash","title":"Hash","text":"<ul> <li><code>md5()</code>: (string) '2cd67a9423f6767507f93a26b26ef760'</li> <li><code>sha1()</code>: (string) '4784a5b3526214adbc6e36bad46a7500e5fc8ae7'</li> <li><code>sha256()</code>: (string) 'e595b97da33a83d738a690ca100b1556071499cfd317430bbbbc4b06ea188d75'</li> </ul>"},{"location":"extensions/internet/","title":"Internet","text":""},{"location":"extensions/internet/#internet","title":"Internet","text":"<ul> <li><code>companyEmail()</code>: (string) 'wendy64@doe.biz'</li> <li><code>domainName()</code>: (string) 'morgan.com'</li> <li><code>domainWord()</code>: (string) 'fisher'</li> <li><code>email()</code>: (string) 'paul37@robinson.com'</li> <li><code>freeEmail()</code>: (string) 'heather35@yahoo.com'</li> <li><code>freeEmailDomain()</code>: (string) 'hotmail.com'</li> <li><code>ipv4()</code>: (string) '172.113.79.142'</li> <li><code>ipv6()</code>: (string) 'c2a:891:3b95:c31d:dfbb:da5:19e6:5543'</li> <li><code>localIpv4()</code>: (string) '10.255.152.175'</li> <li><code>macAddress()</code>: (string) 'B5:CB:35:73:DB:8A'</li> <li><code>password($minLength = 6, $maxLength = 20)</code>: (string) 'qsRHd/'</li> <li><code>safeEmail()</code>: (string) 'harry.harris@example.net'</li> <li><code>safeEmailDomain()</code>: (string) 'example.org'</li> <li><code>slug($nbWords = 6, $variableNbWords = true)</code>: (string) 'consequatur-error-et-nostrum-vel-inventore-qui'</li> <li><code>tld()</code>: (string) 'com'</li> <li><code>url()</code>: (string) 'http://anderson.com/animi-dolorem-minus-deleniti'</li> <li><code>userName()</code>: (string) 'katy.morgan'</li> </ul>"},{"location":"extensions/language/","title":"Language","text":""},{"location":"extensions/language/#language","title":"Language","text":"<ul> <li><code>languageCode()</code>: (string) 'kj'</li> <li><code>locale()</code>: (string) 'kcg_NG'</li> </ul>"},{"location":"extensions/lorem/","title":"Lorem","text":""},{"location":"extensions/lorem/#lorem","title":"Lorem","text":"<ul> <li><code>paragraph($sentenceCount = 3, $variableSentenceCount = true)</code>: (string) 'Ut dicta quisquam sit voluptas accusamus eum. Est sint doloribus et magnam iure odio quia.'</li> <li><code>paragraphs($paragraphCount = 3)</code>: (array) ['Veritatis eos itaque velit. Doloremque praesentium a provident earum. Accusantium modi accusamus accusantium fugit et nobis voluptas. Qui quia nihil dolore tempora eos facere fuga temporibus.', 'Et natus est autem et dicta delectus. Illo dolores iure rem. Sed fuga amet atque odio. Maiores voluptate optio eaque repudiandae ducimus blanditiis.', 'Alias tempora animi voluptatem et aut. Magni repudiandae eligendi qui odit rerum. Inventore sit officia illo voluptas esse. Eos commodi nisi eius sint minima voluptatem.']</li> <li><code>sentence($wordCount = 6, $variableWordCount = true)</code>: (string) 'Provident et tempora rem accusantium.'</li> <li><code>sentences($sentenceCount = 3)</code>: (array) ['Aut cupiditate ratione aspernatur est velit veritatis.', 'Ea earum rerum sunt dolore at quos.', 'Magnam vel dolorem aliquam sed expedita omnis maiores.']</li> <li><code>text($maxCharacters = 200)</code>: (string) 'Sapiente quibusdam veniam porro ratione sit repellat. Aperiam aperiam non officiis et ea architecto et. Ratione nulla sint quis accusantium fugit aliquid est. Perferendis voluptatem qui corporis et.'</li> <li><code>word()</code>: (string) 'ex'</li> <li><code>words($wordCount = 3)</code>: (array) ['cupiditate', 'ducimus', 'ut']</li> </ul>"},{"location":"extensions/number/","title":"Number","text":""},{"location":"extensions/number/#number","title":"Number","text":"<ul> <li><code>boolean($chanceOfGettingTrue = 50)</code>: (bool) true</li> <li><code>numberBetween($min = 0, $max = 2147483647)</code>: (int) 272128026</li> <li><code>randomDigit()</code>: (int) 0</li> <li><code>randomDigitNot($except = 0, $retries = 1000)</code>: (int) 2</li> <li><code>randomDigitNotZero()</code>: (int) 9</li> <li><code>randomFloat($nbMaxDecimals = null, $min = 0, $max = null)</code>: (float) 1.7518362971298475E+308</li> <li><code>randomNumber($nbDigits = null, $strict = false)</code>: (int) 87821802</li> </ul>"},{"location":"extensions/payment/","title":"Payment","text":""},{"location":"extensions/payment/#payment","title":"Payment","text":"<ul> <li><code>creditCardDetails($valid = true)</code>: (array) ['Visa', '4929721646677600', 'Daisy McKenzie', '06/28']</li> <li><code>creditCardExpirationDate($inFuture = true)</code>: (string) '06/28'</li> <li><code>creditCardNumber($type = null, $formatted = false, $separator = \"-\")</code>: (string) '4539578779936423'</li> <li><code>creditCardType()</code>: (string) 'Visa'</li> <li><code>currencyCode()</code>: (string) 'BSD'</li> <li><code>iban($alpha2 = null, $prefix = \"\")</code>: (string) 'AL69480131487G228KIOQ476N998'</li> <li><code>swiftBicNumber()</code>: (string) 'YFPGAEUL540'</li> </ul>"},{"location":"extensions/person/","title":"Person","text":""},{"location":"extensions/person/#person","title":"Person","text":"<ul> <li><code>firstName($gender = null)</code>: (string) 'Victoria'</li> <li><code>firstNameFemale()</code>: (string) 'Wilma'</li> <li><code>firstNameMale()</code>: (string) 'Kevin'</li> <li><code>lastName()</code>: (string) 'Robinson'</li> <li><code>name($gender = null)</code>: (string) 'Vernon Harris'</li> <li><code>title($gender = null)</code>: (string) 'Prof.'</li> <li><code>titleFemale()</code>: (string) 'Dr.'</li> <li><code>titleMale()</code>: (string) 'Prof.'</li> </ul>"},{"location":"extensions/phone_number/","title":"Phone number","text":""},{"location":"extensions/phone_number/#phonenumber","title":"PhoneNumber","text":"<ul> <li><code>e164PhoneNumber()</code>: (string) '+212414090946'</li> <li><code>imei()</code>: (string) '234011831766048'</li> <li><code>phoneNumber()</code>: (string) '681-143-783'</li> </ul>"},{"location":"extensions/strings/","title":"Strings","text":""},{"location":"extensions/strings/#strings","title":"Strings","text":"<ul> <li><code>string($min = 3, $max = 8, $pool = null)</code>: (string) 'tbqo'</li> </ul>"},{"location":"extensions/user_agent/","title":"User agent","text":""},{"location":"extensions/user_agent/#useragent","title":"UserAgent","text":"<ul> <li><code>androidMobileToken()</code>: (string) 'Linux; Android 12'</li> <li><code>chrome()</code>: (string) 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/5350 (KHTML, like Gecko) Chrome/39.0.850.0 Mobile Safari/5350'</li> <li><code>edge()</code>: (string) 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_7_4) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/86.0.4754.12 Safari/535.1 Edg/86.01127.92'</li> <li><code>firefox()</code>: (string) 'Mozilla/5.0 (Windows NT 6.0; en-US; rv:1.9.0.20) Gecko/20240508 Firefox/36.0'</li> <li><code>internetExplorer()</code>: (string) 'Mozilla/5.0 (compatible; MSIE 7.0; Windows CE; Trident/5.0)'</li> <li><code>iosMobileToken()</code>: (string) 'iPhone; CPU iPhone OS 15_1 like Mac OS X'</li> <li><code>linuxPlatformToken()</code>: (string) 'X11; Linux i686'</li> <li><code>macPlatformToken()</code>: (string) 'Macintosh; PPC Mac OS X 10_6_3'</li> <li><code>opera()</code>: (string) 'Opera/9.78 (X11; Linux i686; nl-NL) Presto/2.8.234 Version/10.00'</li> <li><code>safari()</code>: (string) 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_8 rv:2.0; sl-SI) AppleWebKit/533.12.3 (KHTML, like Gecko) Version/5.0 Safari/533.12.3'</li> <li><code>userAgent()</code>: (string) 'Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_8_6 rv:4.0) Gecko/20170527 Firefox/35.0'</li> <li><code>windowsPlatformToken()</code>: (string) 'Windows 95'</li> </ul>"},{"location":"extensions/uuid/","title":"Uuid","text":""},{"location":"extensions/uuid/#uuid","title":"Uuid","text":"<ul> <li><code>uuid4()</code>: (string) 'cc20f0ac-039d-49e7-8a65-594128b1b43b'</li> </ul>"},{"location":"extensions/version/","title":"Version","text":""},{"location":"extensions/version/#version","title":"Version","text":"<ul> <li><code>semver($preRelease = false, $build = false)</code>: (string) '1.62.2'</li> </ul>"},{"location":"info/dummy_data/","title":"What is this fake / dummy data","text":"<p>When writing tests or populating test database you need to came up with various data, like first name, last name, some dates, maybe description, location coordinates and so on. When you deal with multi-language site and want to have it also multilanguage - you need to came up with every language names or address format.</p> <p>All of that can be done by hand, but it's much easier to do <code>$generator-&gt;firstName()</code> and just don't care about what name it will be. Load provider and don't care about given locale names or phone formats.</p> <p>Another use case - imagine you have description with 100 chars limit and want to test if it properly gives error when more is passed - instead of copying some text you can just use <code>$generator-&gt;text(150)</code> to get ~150 characters long text.</p> <p>Last but not least - it make sure your tests will get random data on each run, not every single time same value. If your code is good and tests correct - then it should be no problem. If tests start failing from time to time - then what you think, where is the problem:</p> <ul> <li>with code</li> <li>with tests</li> <li>with random data, it should not be random</li> </ul> <p>I leave answer to you. And yes, there might be cases when data should not be random, but usually it's not that case ;)</p>"},{"location":"info/language_providers/","title":"Language Providers","text":"<p>One of main points of DummyGenerator is to keep core language agnostic. This is why all language providers has been removed from core. </p> <p><code>Person</code> extension provides only small number (~20) of names (from <code>en_US</code> / <code>en_GB</code>) that can be used as first name, last name, part of email etc. If you want more, check dummyproviders to get full providers for <code>en_US</code>,<code>en_GB</code> and <code>pl_PL</code>. I have created them to show how to make them / convert from old Faker, to allow anyone to work on other languages.</p> <p>Keep in mind:</p> <ul> <li>core will stay language agnostic</li> <li>I have no current plans to support any language</li> <li>I have no current plans to work on extending/improving existing language providers.</li> <li>if someone like to make a PR to improve/extend one of mentioned languages I will gladly look at it.</li> <li>I will not accept PRs with other languages, but I will gladly put in docs links to repositories containing language providers</li> </ul>"},{"location":"info/using_dummygenerator/","title":"Using DummyGenerator","text":"<p>DummyGenerator usage is simple:</p> <pre><code>$generator = DummyGeneratorFactory::create();\necho $generator-&gt;firstName();\necho $generator-&gt;email();</code></pre>"}]}